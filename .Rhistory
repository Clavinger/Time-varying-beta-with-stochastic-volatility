ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF2(c(0.005,.1,1.1))
KF2.opt<-optim(c(0.005,.1,1.1),KF2.log,
method="L-BFGS-B",hessian = T,lower = c(-Inf,0,0))
parametry2<-KF2.opt$par
hesjan2=sqrt(diag(solve(KF2.opt$hessian)))
log.KF2<-KF2.opt$value
print("SP2:")
print(round(parametry2,4))
print(round(hesjan2,4))
print(round(-log.KF2,3))
KF.RW=as.xts(KF2(parametry2),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
kmnk<-lm(y~x)
str(kmnk)
kmnk$coefficients[2]
library("FKF")
library(quantmod)
#rm(list = ls())
setwd("C:/Users/user/Documents/github/Time-varying-beta-with-stochastic-volatility/Dane")
#sciaganie danych
baza.danych.zwroty=read.csv.zoo("baza_danych_zwroty.csv",sep=',')
baza.danych.zwroty=as.xts(baza.danych.zwroty)
wig.zwroty=read.csv.zoo("wig_zwroty_sub.csv",sep=',')
wig.zwroty=as.xts(wig.zwroty)
#wybÃ³r tickera
tiker='PKO'
y=baza.danych.zwroty[,tiker]
y=y[-1]
x=wig.zwroty
n=length(x)
par(mfrow=c(2,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
kmnk<-lm(y~x)
OUss2 <- function(alpha, sigma.beta, epsilon){
Tt <- diag(1)
Zt <-array(0,dim=c(1,1,n))
for(i in 1:n) Zt[,,i]=as.numeric(x[i])
ct <- matrix(c(alpha),ncol=1)
dt <- matrix(c(0), nrow = 1)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.beta^2),nrow=1,ncol=1)
a0 <- kmnk$coefficients[2]
P0 <- matrix(data=c(0),nrow=1,ncol=1)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF2 <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[1,])
}
KF2.log <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF2.err <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF2.opt<-optim(c(0.005,.1,1.1),KF2.log,
method="L-BFGS-B",hessian = T,lower = c(-Inf,0,0))
parametry2<-KF2.opt$par
hesjan2=sqrt(diag(solve(KF2.opt$hessian)))
log.KF2<-KF2.opt$value
print("SP2:")
print(round(parametry2,4))
print(round(hesjan2,4))
print(round(-log.KF2,3))
KF.RW=as.xts(KF2(parametry2),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
library("FKF")
library(quantmod)
#rm(list = ls())
setwd("C:/Users/user/Documents/github/Time-varying-beta-with-stochastic-volatility/Dane")
#sciaganie danych
baza.danych.zwroty=read.csv.zoo("baza_danych_zwroty.csv",sep=',')
baza.danych.zwroty=as.xts(baza.danych.zwroty)
wig.zwroty=read.csv.zoo("wig_zwroty_sub.csv",sep=',')
wig.zwroty=as.xts(wig.zwroty)
#wybÃ³r tickera
tiker='PKO'
y=baza.danych.zwroty[,tiker]
y=y[-1]
x=wig.zwroty
n=length(x)
par(mfrow=c(2,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
kmnk<-lm(y~x)
OUss2 <- function(alpha, sigma.beta, epsilon){
Tt <- diag(1)
Zt <-array(0,dim=c(1,1,n))
for(i in 1:n) Zt[,,i]=as.numeric(x[i])
ct <- matrix(c(alpha),ncol=1)
dt <- matrix(c(0), nrow = 1)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.beta^2),nrow=1,ncol=1)
a0 <- kmnk$coefficients[2]
P0 <- matrix(data=c(0),nrow=1,ncol=1)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF2 <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[1,])
}
KF2.log <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF2.err <- function(theta) {
sp <- OUss2(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF2.opt<-optim(c(0.005,.1,1.1),KF2.log,
method="L-BFGS-B",hessian = T,lower = c(-Inf,0,0))
parametry2<-KF2.opt$par
hesjan2=sqrt(diag(solve(KF2.opt$hessian)))
log.KF2<-KF2.opt$value
print("SP2:")
print(round(parametry2,4))
print(round(hesjan2,4))
print(round(-log.KF2,3))
KF.RW=as.xts(KF2(parametry2),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
xx1<-seq(from=parametry2[1]-.05,to=parametry2[1]+.05,length.out = 100)
p1<-sapply(xx1, function(z)  -KF2.log(c(z, parametry2[2],parametry2[3])))
plot(xx1, p1, type='l', main='SP2',xlab="alfa")
abline(v=parametry2[1])
abline(h=-log.KF2)
xx1<-seq(from=parametry2[2]-0.1,to=parametry2[2]+.1,length.out = 100)
p1<-sapply(xx1, function(z)  -KF2.log(c(parametry2[1], z,parametry2[3])))
plot(xx1, p1, type='l', main='SP2',xlab="sigma_beta")
abline(v=parametry2[2])
abline(h=-log.KF2)
xx2<-seq(from=0.001,to=parametry2[2]+.1,length.out = 100)
p2<-sapply(xx2, function(z)  -KF2.log(c(parametry2[1], z,parametry2[3])))
plot(xx2, p2, type='l', main='SP2',xlab="sigma_beta")
abline(v=parametry2[2])
abline(h=-log.KF2)
xx2<-seq(from=0.001,to=parametry2[2]+.05,length.out = 100)
p2<-sapply(xx2, function(z)  -KF2.log(c(parametry2[1], z,parametry2[3])))
plot(xx2, p2, type='l', main='SP2',xlab="sigma_beta")
abline(v=parametry2[2])
abline(h=-log.KF2)
xx3<-seq(from=parametry2[3]-0.5,to=parametry2[3]+0.5,length.out = 100)
p3<-sapply(xx3, function(z)  -KF2.log(c(parametry2[1], parametry2[2],z)))
plot(xx3, p3, type='l', main='SP2',xlab="sigma_epsilon")
abline(v=parametry2[3])
abline(h=-log.KF2)
KF2.RW=as.xts(KF2(parametry2),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF2.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
#RW prametru beta i alpha nieskorelowane (odpowiada SV wersja 2)
OUss <- function(sigma.alfa, sigma.beta, epsilon){
Tt <- diag(2)
Zt <-array(0,dim=c(1,2,n))
for(i in 1:n) Zt[,,i]=c(1,as.numeric(x[i]))
ct <- matrix(c(0),ncol=1)
dt <- matrix(c(0,0), nrow = 2)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.alfa^2,0,0,sigma.beta^2),nrow=2,ncol=2)
a0 <-  parametry.mle[1:2]
P0 <- matrix(data=c(0,0,0,0),nrow=2,ncol=2)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF1 <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[2,])
}
KF1.log <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF1.err <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF1.opt<-optim(c(.1,1,1.1),KF.log,
method="L-BFGS-B",hessian = T )
parametry<-KF1.opt$par
hesjan=sqrt(diag(solve(KF1.opt$hessian)))
log.KF1<-KF1.opt$value
print("SP1:")
print(round(parametry,4))
print(round(hesjan,4))
print(round(-log.KF1,3))
KF1 <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[2,])
}
KF1.log <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF1.err <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF1.opt<-optim(c(.1,1,1.1),KF1.log,
method="L-BFGS-B",hessian = T )
parametry<-KF1.opt$par
hesjan=sqrt(diag(solve(KF1.opt$hessian)))
log.KF1<-KF1.opt$value
print("SP1:")
print(round(parametry,4))
print(round(hesjan,4))
print(round(-log.KF1,3))
KF1.log(c(.1,1,1.1))
n
KF1(c(.1,1,1.1))
as.numeric(x[i])
i=2
as.numeric(x[i])
c(1,as.numeric(x[i]))
OUss <- function(sigma.alfa, sigma.beta, epsilon){
Tt <- diag(2)
Zt <-array(0,dim=c(1,2,n))
for(i in 1:n) Zt[,,i]=c(1,as.numeric(x[i]))
ct <- matrix(c(0),ncol=1)
dt <- matrix(c(0,0), nrow = 2)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.alfa^2,0,0,sigma.beta^2),nrow=2,ncol=2)
a0 <-  parametry.mle[1:2]
P0 <- matrix(data=c(0,0,0,0),nrow=2,ncol=2)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF1 <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[2,])
}
KF1.log <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF1.err <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF1(c(.1,1,1.1))
#RW prametru beta i alpha nieskorelowane (odpowiada SV wersja 2)
OUss <- function(sigma.alfa, sigma.beta, epsilon){
Tt <- diag(2)
Zt <-array(0,dim=c(1,2,n))
for(i in 1:n) Zt[,,i]=c(1,as.numeric(x[i]))
ct <- matrix(c(0),ncol=1)
dt <- matrix(c(0,0), nrow = 2)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.alfa^2,0,0,sigma.beta^2),nrow=2,ncol=2)
a0 <-  kmnk$coefficients[1:2]
P0 <- matrix(data=c(0,0,0,0),nrow=2,ncol=2)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF1 <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[2,])
}
KF1.log <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF1.err <- function(theta) {
sp <- OUss(theta[1], theta[2], theta[3] )
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF1(c(.1,1,1.1))
KF1.opt<-optim(c(.1,1,1.1),KF1.log,
method="L-BFGS-B",hessian = T )
parametry<-KF1.opt$par
hesjan=sqrt(diag(solve(KF1.opt$hessian)))
log.KF1<-KF1.opt$value
print("SP1:")
print(round(parametry,4))
print(round(hesjan,4))
print(round(-log.KF1,3))
print(round(-log.KF2,3))
xx1<-seq(from=parametry[1]-.01,to=parametry[1]+.01,length.out = 100)
p1<-sapply(xx1, function(z)  -KF.log(c(z, parametry[2],parametry[3])))
plot(xx1, p1, type='l',main='SP1',xlab="sigma_alfa")
abline(v=parametry[1])
abline(h=-log.KF1)
xx1<-seq(from=parametry[1]-.01,to=parametry[1]+.01,length.out = 100)
p1<-sapply(xx1, function(z)  -KF1.log(c(z, parametry[2],parametry[3])))
plot(xx1, p1, type='l',main='SP1',xlab="sigma_alfa")
abline(v=parametry[1])
abline(h=-log.KF1)
xx2<-seq(from=parametry[2]-0.1,to=parametry[2]+.1,length.out = 100)
p2<-sapply(xx1, function(z)  -KF1.log(c(parametry[1], z,parametry[3])))
plot(xx2, p2, type='l',main='SP1',xlab="sigma_beta")
abline(v=parametry[2])
abline(h=-log.KF1)
parametry[2]
xx2<-seq(from=parametry[2]-0.1,to=parametry[2]+.1,length.out = 100)
p2<-sapply(xx2, function(z)  -KF1.log(c(parametry[1], z,parametry[3])))
plot(xx2, p2, type='l',main='SP1',xlab="sigma_beta")
abline(v=parametry[2])
abline(h=-log.KF1)
xx2<-seq(from=0.001,to=parametry[2]+.1,length.out = 100)
p2<-sapply(xx2, function(z)  -KF1.log(c(parametry[1], z,parametry[3])))
plot(xx2, p2, type='l',main='SP1',xlab="sigma_beta")
abline(v=parametry[2])
abline(h=-log.KF1)
xx3<-seq(from=parametry[3]-0.5,to=parametry[3]+0.5,length.out = 100)
p3<-sapply(xx3, function(z)  -KF1.log(c(parametry[1], parametry[2],z)))
plot(xx3, p3, type='l',main='SP1',xlab="sigma_epsilon")
abline(v=parametry[3])
abline(h=-log.KF1)
KF1.RW=as.xts(KF1(parametry),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF1.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
plot(KF1.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
lines(KF2.RW,col='red')
OUss5 <- function(alpha,rho, beta, sigma.beta, epsilon){
Tt <- rho*diag(1)
Zt <-array(0,dim=c(1,1,n))
for(i in 1:n) Zt[,,i]=as.numeric(x[i])
ct <- matrix(c(alpha),ncol=1)
dt <- matrix(c((1-rho)*beta), nrow = 1)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.beta^2),nrow=1,ncol=1)
a0 <- parametry.mle[2]
P0 <- matrix(data=c(0),nrow=1,ncol=1)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF5 <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$at[1,])
}
KF5.log <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF5.err <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF5.opt<-optim(c(0.005,0.2,1.15,0.5,1.1),KF5.log,
method="L-BFGS-B",hessian = T,lower=c(-Inf,-Inf,-Inf,0,0))
parametry5<-KF5.opt$par
hesjan5=sqrt(diag(solve(KF5.opt$hessian)))
log.KF5<-KF5.opt$value
print("SP5:")
print(round(parametry5,4))
print(round(hesjan5,4))
print(round(-log.KF5,3))
OUss5 <- function(alpha,rho, beta, sigma.beta, epsilon){
Tt <- rho*diag(1)
Zt <-array(0,dim=c(1,1,n))
for(i in 1:n) Zt[,,i]=as.numeric(x[i])
ct <- matrix(c(alpha),ncol=1)
dt <- matrix(c((1-rho)*beta), nrow = 1)
GGt<- matrix(data=c(epsilon^2),nrow = 1,ncol=1)
HHt<- matrix(data=c(sigma.beta^2),nrow=1,ncol=1)
a0 <- kmnk$coefficients[2]
P0 <- matrix(data=c(0),nrow=1,ncol=1)
return(list(a0 = a0, P0 = P0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
KF5 <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$at[1,])
}
KF5.log <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(-ans$logLik)
}
KF5.err <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(sum(ans$vt[1,]^2))
}
KF5.opt<-optim(c(0.005,0.2,1.15,0.5,1.1),KF5.log,
method="L-BFGS-B",hessian = T,lower=c(-Inf,-Inf,-Inf,0,0))
parametry5<-KF5.opt$par
hesjan5=sqrt(diag(solve(KF5.opt$hessian)))
log.KF5<-KF5.opt$value
print("SP5:")
print(round(parametry5,4))
print(round(hesjan5,4))
print(round(-log.KF5,3))
xx1<-seq(from=parametry5[1]-.05,to=parametry5[1]+.05,length.out = 100)
p1<-sapply(xx1, function(z)  -KF5.log(c(z, parametry5[2],parametry5[3],parametry5[4],parametry5[5])))
plot(xx1, p1, type='l', main='SP5',xlab="alfa")
abline(v=parametry5[1])
abline(h=-log.KF5)
xx1<-seq(from=parametry5[2]-0.1,to=parametry5[2]+.1,length.out = 100)
p1<-sapply(xx1, function(z)  -KF5.log(c(parametry5[1], z,parametry5[3],parametry5[4],parametry5[5])))
plot(xx1, p1, type='l', main='SP5',xlab="gamma")
abline(v=parametry5[2])
abline(h=-log.KF5)
xx1<-seq(from=parametry5[3]-0.1,to=parametry5[3]+.1,length.out = 100)
p1<-sapply(xx1, function(z)  -KF5.log(c(parametry5[1], parametry5[2],z,parametry5[4],parametry5[5])))
plot(xx1, p1, type='l', main='SP5',xlab="beta")
abline(v=parametry5[3])
abline(h=-log.KF5)
xx1<-seq(from=parametry5[4]-0.1,to=parametry5[4]+.1,length.out = 100)
p1<-sapply(xx1, function(z)  -KF5.log(c(parametry5[1], parametry5[2],parametry5[3],z,parametry5[5])))
plot(xx1, p1, type='l', main='SP5',xlab="sigma_beta")
abline(v=parametry5[4])
abline(h=-log.KF5)
xx1<-seq(from=parametry5[5]-0.5,to=parametry5[5]+0.5,length.out = 100)
p1<-sapply(xx1, function(z)  -KF5.log(c(parametry5[1], parametry5[2],parametry5[3],parametry5[4],z)))
plot(xx1, p1, type='l',main='SP5',xlab="sigma_epsilon")
abline(v=parametry5[5])
abline(h=-log.KF5)
KF3.RW=as.xts(KF3(parametry3),order.by = index(x))
KF3.RW=as.xts(KF5(parametry5),order.by = index(x))
KF5(parametry5)
length(KF5(parametry5))
length(x)
length(KF2(parametry2))
length(KF1(parametry))
KF5 <- function(theta) {
sp <- OUss5(theta[1], theta[2], theta[3], theta[4], theta[5])
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt,  yt =matrix(as.vector(y), nrow=1,ncol=n))
return(ans$att[1,])
}
KF3.RW=as.xts(KF5(parametry5),order.by = index(x))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF1.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
plot(KF1.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
lines(KF3.RW,col='red')
plot(KF3.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF1.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
par(mfrow=c(3,1))
plot(x,main='WIG',major.ticks = "years",grid.ticks.on = "years")
plot(y,main=tiker,major.ticks = "years",grid.ticks.on = "years")
plot(KF3.RW,main=expression(beta),major.ticks = "years",grid.ticks.on = "years")
par(mfrow=c(1,1))
